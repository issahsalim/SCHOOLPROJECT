# Generated by Django 5.1.1 on 2025-01-06 06:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='absenceReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Student_Name', models.CharField(max_length=100)),
                ('Student_Class', models.CharField(max_length=40)),
                ('Parent_Name', models.CharField(max_length=100)),
                ('reason', models.TextField()),
                ('proveFile', models.FileField(blank=True, null=True, upload_to='upload')),
                ('submitted_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Assess_Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index_Number', models.CharField(max_length=10)),
                ('Total_Quiz_Marks', models.FloatField()),
                ('Total_Assignment_Mark', models.FloatField()),
                ('Attendance_Mark', models.FloatField()),
                ('Mid_Sem', models.FloatField()),
                ('Total', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Class', models.CharField(max_length=20)),
                ('Date', models.DateField()),
                ('Due_date', models.DateField()),
                ('status', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='FormMaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('ClassHanlder', models.CharField(max_length=100)),
                ('phoneNumber', models.IntegerField()),
                ('age', models.IntegerField()),
                ('picture', models.ImageField(blank=True, null=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Headmaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('phoneNumber', models.IntegerField()),
                ('email', models.EmailField(max_length=254)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index_number', models.CharField(max_length=10)),
                ('subject', models.CharField(max_length=100)),
                ('marks', models.FloatField()),
                ('grade', models.CharField(max_length=2)),
                ('term', models.CharField(max_length=50)),
                ('year', models.CharField(max_length=4)),
            ],
        ),
        migrations.CreateModel(
            name='staticIndexNumbers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Student_IndexNumber', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='studentLogin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=50)),
                ('indexnumber', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='studentResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index_number', models.CharField(max_length=10)),
                ('Quizzes', models.IntegerField(default=0, editable=False)),
                ('Assignments', models.IntegerField(default=0, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('classes', models.CharField(choices=[('class1', 'class1'), ('class2', 'class2'), ('class3', 'class3'), ('class4', 'class4'), ('class5', 'class5'), ('class6', 'class6'), ('form1', 'form1'), ('form2', 'form2'), ('form3', 'form3')], default='class', max_length=20)),
                ('role', models.CharField(choices=[('student', 'Student'), ('teacher', 'Teacher')], default='Choice', max_length=20)),
                ('Student_name', models.CharField(max_length=100)),
                ('parent_name', models.CharField(max_length=100)),
                ('telephone', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UploadRecordFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classFile', models.CharField(default=None, max_length=20)),
                ('english', models.FileField(default=None, upload_to='English')),
                ('math', models.FileField(default=None, upload_to='math')),
                ('Int_science', models.FileField(default=None, upload_to='science')),
                ('social_studies', models.FileField(default=None, upload_to='Social')),
                ('Twi', models.FileField(default=None, upload_to='Twi')),
                ('Creative_art', models.FileField(blank=True, default=None, null=True, upload_to='creative_art')),
                ('history', models.FileField(blank=True, default=None, null=True, upload_to='history')),
                ('our_world', models.FileField(blank=True, default=None, null=True, upload_to='our_world')),
                ('BDT', models.FileField(blank=True, default=None, null=True, upload_to='BDT')),
                ('Government', models.FileField(blank=True, default=None, null=True, upload_to='Government')),
                ('Class', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
